13.1
Date
Design a class called Date. The class should store a date in three integers: month, day ,
and year. There should be member functions to print the date in the following forms:
12/25/2014
December 25, 2014
25 December 2014
Demonstrate the class by writing a complete program implementing it.
Input Validation: Do not accept values for the day greater than 31 or less than 1. Do
not accept values for the month greater than 12 or less than 1.

13.3

Car Class
Write a class named Car that has the following member variables:
• yearModel . An int that holds the car’s year model.
• make . A string that holds the make of the car.
• speed . An int that holds the car’s current speed.

In addition, the class should have the following constructor and other member functions.
• Constructor. The constructor should accept the car’s year model and make as arguments. 
These values should be assigned to the object’s yearModel and make member
variables. The constructor should also assign 0 to the speed member variables.
• Accessor. Appropriate accessor functions to get the values stored in an object’s
yearModel, make, and speed member variables.
 • accelerate . The accelerate function should add 5 to the speed member variable
each time it is called.
 • brake . The brake function should subtract 5 from the speed member variable each
time it is called.

Demonstrate the class in a program that creates a Car object, and then calls the
accelerate function five times. After each call to the accelerate function, get
the current speed of the car and display it. Then, call the brake function five times.
After each call to the brake function, get the current speed of the car and display it. 

13.4
Personal Information Class
Design a class that holds the following personal data: name, address, age, and phone
number. Write appropriate accessor and mutator functions. Demonstrate the class by
writing a program that creates three instances of it. One instance should hold your information, 
and the other two should hold your friends’ or family members’ information. 

13.5
RetailItem Class
Write a class named RetailItem that holds data about an item in a retail store. The
class should have the following member variables:
 • description . A string that holds a brief description of the item.
 • unitsOnHand . An int that holds the number of units currently in inventory.
 • price . A double that holds the item’s retail price.
Write a constructor that accepts arguments for each member variable, appropriate
mutator functions that store values in these member variables, and accessor functions
that return the values in these member variables. Once you have written the class, write
a separate program that creates three RetailItem objects and stores the following data
in them.
            Description   Units On Hand       Price
Item #1     Jacket           12               59.95
Item #2     Designer Jeans   40               34.95
Item #3     Shirt            20               24.95 

13.6

Design an Inventory class that can hold information and calculate data for items in a
retail store’s inventory. The class should have the following private member variables:
Variable Name         Description
itemNumber            An int that holds the item’s item number.
quantity              An int for holding the quantity of the items on hand.
cost                  A double for holding the wholesale per-unit cost of the item
totalCost             A double for holding the total inventory cost of the item 
                        (calculated as quantity times cost ).

The class should have the following public member functions:
Member Function         Description
Default Constructor     Sets all the member variables to 0.
Constructor #2          Accepts an item’s number, cost, and quantity as arguments.
                            The function should copy these values to the appropriate
                            member variables and then call the setTotalCost function.
setItemNumber           Accepts an integer argument that is copied to the
                            itemNumber member variable.
setQuantity             Accepts an integer argument that is copied to the quantity
                            member variable.
setCost                 Accepts a double argument that is copied to the cost
                            member variable.
setTotalCost            Calculates the total inventory cost for the item ( quantity
                            times cost) and stores the result in totalCost.
getItemNumber           Returns the value in itemNumber.
getQuantity             Returns the value in quantity.
getCost                 Returns the value in cost.
getTotalCost            Returns the value in totalCost.

Demonstrate the class in a driver program.
Input Validation: Do not accept negative values for item number, quantity, or cost.

14.1
Design a class Numbers that can be used to translate whole dollar amounts in the range
0 through 9999 into an English description of the number. For example, the number
713 would be translated into the string seven hundred thirteen, and 8203 would be
translated into eight thousand two hundred three. 

The class should have a single integer member variable:
int number;
and a static array of string objects that specify how to translate key dollar amounts
into the desired format. For example, you might use static strings such as
string lessThan20[20] = {"zero", "one", ..., "eighteen", "nineteen"};
string hundred = "hundred";
string thousand = "thousand";
The class should have a constructor that accepts a nonnegative integer and uses it to
initialize the Numbers object. It should have a member function print() that prints
the English description of the Numbers object. Demonstrate the class by writing a main
program that asks the user to enter a number in the proper range and then prints out
its English description. 

14.2
Assuming that a year has 365 days, write a class named DayOfYear that takes an integer 
representing a day of the year and translates it to a string consisting of the month
followed by day of the month. 

For example,
Day 2 would be January 2 .
Day 32 would be February 1 .
Day 365 would be December 31.

The constructor for the class should take as parameter an integer representing the day
of the year, and the class should have a member function print() that prints the day
in the month–day format. 

The class should have an integer member variable to represent the day 
and should have static member variables holding string objects that can
be used to assist in the translation from the integer format to the month-day format.
Test your class by inputting various integers representing days and printing out their
representation in the month–day format.



14.3
Modify the DayOfYear class, written in Programming Challenge 2, to add a constructor 
that takes two parameters: a string object representing a month and an integer in
the range 0 through 31 representing the day of the month. The constructor should then
initialize the integer member of the class to represent the day specified by the month
and day of month parameters. The constructor should terminate the program with an
appropriate error message if the number entered for a day is outside the range of days
for the month given.


Add the following overloaded operators:
++ prefix and postfix increment operators. These operators should modify the
DayOfYear object so that it represents the next day. If the day is already the end
of the year, the new value of the object will represent the first day of the year.

−− prefix and postfix decrement operators. These operators should modify the
DayOfYear object so that it represents the previous day. If the day is already the
first day of the year, the new value of the object will represent the last day of the

14.4
Design a class called NumDays. The class’s purpose is to store a value that represents a
number of work hours and convert it to a number of days. For example, 8 hours would
be converted to 1 day, 12 hours would be converted to 1.5 days, and 18 hours would
be converted to 2.25 days. 
The class should have a constructor that accepts a number
of hours, as well as member functions for storing and retrieving the hours and days.
The class should also have the following overloaded operators:
+ Addition operator. When two NumDays objects are added together,
 the overloaded + operator should return the sum of the two objects’ hours members.
− Subtraction operator. When one NumDays object is subtracted from another,
the overloaded − operator should return the difference of the two objects’ hours
members.
++ Prefix and postfix increment operators. These operators should increment the
number of hours stored in the object. When incremented, the number of days
should be automatically recalculated.
−− Prefix and postfix decrement operators. These operators should decrement the
number of hours stored in the object. When decremented, the number of days
should be automatically recalculated. 

14.5
Design a class named TimeOff. The purpose of the class is to track an employee’s
sick leave, vacation, and unpaid time off. It should have, as members, the following
instances of the NumDays class described in Programming Challenge 4:

maxSickDays     A NumDays object that records the maximum number of days of
                    sick leave the employee may take.
sickTaken       A NumDays object that records the number of days of sick leave the
                    employee has already taken.
maxVacation     A NumDays object that records the maximum number of days of
                    paid vacation the employee may take.
vacTaken        A NumDays object that records the number of days of paid vacation
                    the employee has already taken. 
maxUnpaid       A NumDays object that records the maximum number of days of
                    unpaid vacation the employee may take.
unpaidTaken     A NumDays object that records the number of days of unpaid leave
                    the employee has taken.

Additionally, the class should have members for holding the employee’s name and identification number. 

It should have an appropriate constructor and member functions for
storing and retrieving data in any of the member objects.

Input Validation: Company policy states that an employee may not accumulate more
than 240 hours of paid vacation. The class should not allow the maxVacation object
to store a value greater than this amount.
